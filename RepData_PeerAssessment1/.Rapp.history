head(nzv)
filteredDescr <- mdrrDescr[,-nzv]
dim(filteredDescr)
descrCor <- cor(filteredDescr)
head(descrCor)
upper.tri(descrCor)
??upper.tri
summary(descrCor)
head(descrCor)
summary(descrCor[upper.tri(descrCor)])
lefrDesign <- matrix(0,nrow = 6, ncol = 6)
lefrDesign[,1] <- c(1,1,1,1,1,1)
lefrDesign[,2] <- c(1,1,1,0,0,0)
lefrDesign[,3] <- c(0,0,0,1,1,1)
lefrDesign[,4] <- c(1,0,0,1,0,0)
lefrDesign[,5] <- c(0,1,0,0,1,0)
lefrDesign[,6] <- c(0,0,1,0,0,1)
lefrDesign
comboInfo <- findLinearCombos(lefrDesign)
comboInfo
library(mlbench)
data(Sonar)
srt(Sonar[,1:10])
str(Sonar[,1:10])
set.seed(998)
inTraining <- createDataPartition(Sonar$Class, p = 0.75, list = F)
training <- Sonar[inTraining,]
testing <- Sonar[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
set.seed(825)
gbmFit1 <- train(Class~., data = training, method = "gbm", trControl=fitControl, verbose = F)
gbmFit1
q()
ls9
ls()
rm(list = ls())
q()
when <- data.frame(time = c("afternoon", "night", "afternoon",#
                            "morning", "morning", "morning",#
                            "morning", "afternoon", "afternoon"),#
                   day = c("Mon", "Mon", "Mon",#
                           "Wed", "Wed", "Fri",#
                           "Sat", "Sat", "Fri"))
when
library(caret)
levels(when$time) <- c("morning", "afternoon", "night")
levels(when$day) <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
when
model.matrix(~day,when)
mainEffects <- dummyVars(~day+time, data = when)
mainEffects
predict(mainEffects, when[1:3,])
??as.numeric
q()
ls()
data(mdrr)
??mdrr
library(caret)
data(mdrr)
mdrrDescr
names(mdrrDescr)
??mdrrDescr
mdrrClass
dim(mdrrClass)
length(mdrrClass)
dim(mdrrDescr)
nzv <- nearZeroVar(mdrrDescr)
filteredDescr <- mdrrDescr[, -nzv]
dim(filteredDescr)
descrCor <- cor(filteredDescr)
data.frame(sapply(filteredDescr,class))
descrCor
highlyCorDescr <- findCorrelation(descrCor, cutoff = 0.75)
highlyCorDescr
filteredDescr <- filteredDescr[, -highlyCorDescr]
dim(filteredDescr)
?cor
q()
ls()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
dim(vowel.test)
dim(vowel.train)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
set.seed(33833)
rfModel <- train(y, method = "rf", data = vowel.train)
rfModel <- train(y~., method = "rf", data = vowel.train)
gbmModel <- train(y~., method = "gbm", data = vowel.train)
rfModel$finalModel
rfModel
confusionMatrix.train(rfModel, vowel.test$y)
confusionMatrix.train(rfModel, vowel.test)
confusionMatrix(rfModel, vowel.test)
confusionMatrix(rfModel, newdata = vowel.test)
confusionMatrix(predict(rfModel, vowel.test), vowel.test$y)
confusionMatrix(predict(gbmModel, vowel.test), vowel.test$y)
library(caret)#
library(gbm)#
set.seed(3433)#
library(AppliedPredictiveModeling)#
data(AlzheimerDisease)#
adData = data.frame(diagnosis,predictors)#
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]#
training = adData[ inTrain,]#
testing = adData[-inTrain,]
q()
??plot.enet
data(diabetes)
library(elasticnet)
data(diabetes)
head(diabetes)
dim(diabetes)
summary(diabetes)
attach(diabetes)
object <- enet(x,y,lambda=1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
set.seed(3523)#
library(AppliedPredictiveModeling)#
data(concrete)#
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]#
training = concrete[ inTrain,]#
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)#
library(AppliedPredictiveModeling)#
data(concrete)#
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]#
training = concrete[ inTrain,]#
testing = concrete[-inTrain,]
dim(training)
names(training)
lassoModel <- train(CompressiveStrength~.,method = "lasso", data = training)
lassoModel
summary(lassoModel)
?enet
object(testing[,1:8], testing$CompressiveStrength,lambda = 0)
object <- enet(testing[,1:8], testing$CompressiveStrength,lambda = 0)
head(testing)
testing[,1:8]
object <- enet(testing[,1:8], testing$CompressiveStrength,lambda = 0)
sapply(testing,class)
sapply(diabetes,class)
diabetes$x
class(diabetes$x)
?AsIs
lassoModel$finalModel
plot.enet(lassoModel$finalModel)
plot(lassoModel$finalModel)
?plot.enet
plot.enet(lassoModel$finalModel, use.color=T)
plot.enet(lassoModel$finalModel, use.color=T, cex = 0.5)
legend()
legend(0,0)
plot.enet(lassoModel$finalModel, use.color=T, cex = 0.5, legend())
?legend
plot.enet(lassoModel$finalModel, use.color=T, cex = 0.5)
legend("TOP")
legend("top")
legend("top",legend=LETTERS[1:9])
set.seed(3523)#
library(AppliedPredictiveModeling)#
data(concrete)#
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]#
training = concrete[ inTrain,]#
testing = concrete[-inTrain,]
svmModel <- train(CompressiveStrength~., data = training, method = "SVM")
svmModel <- train(CompressiveStrength~., data = training, method = "svm")
library(e1071)
svmModel <- svm(CompressiveStrength~., data = training)
prodect(svmModel,testing)
predict(svmModel,testing)
svmModel
confusionMatrix(predict(svmModel,testing), testing$CompressiveStrength)
summary(svmModel)
pred <- predict(svmModel,testing)
pred
table(pred,testing$CompressiveStrength)
head(table(pred,testing$CompressiveStrength))
class(pred)
confusionMatrix(pred,testing$CompressiveStrength)
class(pred)
class(testing$CompressiveStrength)
length(testing$CompressiveStrength)
length(pred)
confusionMatrix(as.numeric(pred),testing$CompressiveStrength)
pred <- fitted(svmModel)
pred
table(pred,training$CompressiveStrength)
predict(svmModel,training)
q()
set.seed(3523)#
library(AppliedPredictiveModeling)#
data(concrete)#
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]#
training = concrete[ inTrain,]#
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)#
library(AppliedPredictiveModeling)#
data(concrete)#
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]#
training = concrete[ inTrain,]#
testing = concrete[-inTrain,]
library(e1071)
svmModel <- svm(CompressiveStrength~., data = training)
svmModel
pred <- predict(svmModel, testing)
sqrt(sum((testing$CompressiveStrength - pred)^2)/length(pred))
q()
library(lm);library(ggplot2)
library(tm);library(ggplot2)
library(swirl)
swirl()
q()
ls()
library(mice)
library(VIM)
install.packages("VIM")
data(sleep, package = "VIM")
dim(sleep)
sum(complete.cases(sleep))
sleep
aggr(sleep)
library(VIM)
aggr(sleep)
md.pattern(sleep)
imp <- mice(sleep, seed = 1234)
fit <- with(imp, lm(Dream~Span + Gest))
pooled <- pool(fit)
summary(pooled)
pooled
fit
setwd("/Users/summerge/Documents/Learning R/RR")
dir()
activity <- read.csv("activity.csv")
head(activity)
library(dplyr)
by_interval <- group_by(activity, interval)
mean_interval <- summarise(by_interval, steps = mean(steps, rm.na = T))
mean_interval
mean_interval <- summarise(by_interval, steps = mean(steps, na.rm = T))
mean_interval
dim(mean_interval)
?mice
nhanes
mice(nhanes)
imp <- mice(nhanes)
imp <- mice(nhanes)
imp
imp$imputations$bmi
complete(imp)
sum(complete.cases(activity))
md.pattern(activity)
aggr(activity)
aggr(activity)
activity_imp <- mice(activity, seed = 12345)
imp
fit <- with(activity_imp, lm(steps~interval))
pool(fit)
ls()
rm("fit")
rm("imp")
rm("pooled")
rm("sleep")
ls()
fit <- with(activity_imp, lm(steps~interval))
pooled <- pool(fit)
summary(pooled)
activity_imp
complete(activity_imp, action = 5)
head(complete(activity_imp, action = 5))
head(complete(activity_imp, action = 5),100)
head(complete(activity_imp, action = 3),100)
head(complete(activity_imp, action = 1),100)
fit <- with(activity_imp, lm(interval~steps))
pooled <- pool(fit)
summary(pooled)
fit <- with(activity_imp, lm(steps~interval))
pooled <- pool(fit)
activity_imp
activity_imp$imp$steps
head(complete(activity_imp), 30)
