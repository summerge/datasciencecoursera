_HiStOrY_V2_
?ong
?png
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
names(training)
sapply(training,class)
rfModel <- train(Genotype~., method = "rf", data = training)
set.seed(62433)
rfModel <- train(Genotype~., method = "rf", data = training)
gbmModel <- train(Genotype~., method = "gbm", data = training)
ldaModel <- train(Genotype~., method = "lda", data = training)
confusionMatrix(predict(rfModel, testing), testing$Genotype)
confusionMatrix(predict(gbmModel, testing), testing$Genotype)
confusionMatrix(predict(ldaModel, testing), testing$Genotype)
combine <- predict(rfModel, testing)/3 + predict(gbmModel, testing)/3 + predict(ldaModel, testing)/3
predict(rfModel,testing)
predDF <- data.frame(rfModel, gbmModel, ldaModel, Genotype = testing$Genotype)
rfPred <- predict(rfModel, testing)
gbmPred <- predict(gbmModel, testing)
ldaPred <- predict(ldaModel, testing)
predDF <- data.frame(rfPred, gbmPred, ldaPred, Genotype = testing$Genotype)
combModFit <- train(Genotype~., method = "rf", data = predDF)
predDF
warnings()
ls()
rm(list = ls())
library(ISLR);data(Wage)
Wage <- subset(Wage, select = -c(logwage))
inBuild <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
validation <- Wage[-inBuild,];buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y = buildData$wage, p = 0.7, list = F)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
mod1 <- train(wage~.,nethod = "glm", data = training)
mod1 <- train(wage~.,method = "glm", data = training)
mod1
mod2 <- train(wage~., method = "rf", data = training, trControl = trainControl(method = "cv"),number = 3)
mod2
pred1 <- predict(mod1,testing);pred2<-predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
pred1
pred2
predDF <- data.frame(pred1,pred2,wage=testing$wage)
combModFit <- train(wage~.,method = "gam",data=predDF)
combPred <- predict(combModFit,preDF)
combPred <- predict(combModFit,predDF)
combPred
predDF
?train
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(inTrain)
names(training)
set.seed(62433)
rfModel <- train(diagnosis~., method = "rf", data = training)
gbmModel <- train(diagnosis~., method = "gbm", data = training)
ldaModel <- train(diagnosis~., method = "lda", data = training)
rfPred <- predict(rfModel, testing)
gbmPred <- predict(gbmModel, testing)
ldaPred <- predict(ldaModel, testing)
predDF <- data.frame(rfPred, gbmPred, ldaPred, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis~., method = "rf", data = predDF)
combModFit
confusionMatrix(combModFit,testing$diagnosis)
confusionMatrix(predict(combModFit,testing),testing$diagnosis)
confusionMatrix(predict(rfModel,testing),testing$diagnosis)
confusionMatrix(predict(ldaModel,testing),testing$diagnosis)
confusionMatrix(predict(gbmModel,testing),testing$diagnosis)
confusionMatrix(predict(combModFit,testing),testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
?plot.enet
??plot.enet
?lasso
??lasso
set.seed(233)
lassoModel <- train(CompressiveStrength~., method = "lasso", data = training)
lassoModel
plot.enet
?plot.enet
data(diabetes)
enet
?enet
diabetes
head(diabetes)
head(diabetes)
predictions <- predict(lassoModel, testing)
predictions
lassoModel$modelInfo
lassoModel
plot.enet(lassoModel)
object1 <- with(diabetes, enet(x,y,lambda=0))
plot(object1)
ob <- with(testing, enet(x,y,lambda=0))
class(diabetes)
summary(diabetes)
names(diabetes)
names(testing)
dim(diabetes)
head(diabetes)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
rfModel <- train(y~., method = "rf", data = vowel.train)
gbmModel <- train(y~., method = "gbm", data = vowel.train)
set.seed(33833)
gbmModel <- train(y~., method = "gbm", data = vowel.train)
rfModel <- train(y~., method = "rf", data = vowel.train)
confusionMatrix(predict(rfModel,vowel.test), vowel.test)
confusionMatrix(predict(rfModel,vowel.test), vowel.test$y)
confusionMatrix(predict(gbmModel,vowel.test), vowel.test$y)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?enet
??enet
library(elasticnet)
lasso <- train(CompressiveStrength~.,method = "lasso", data = training)
lassoModel <- train(CompressiveStrength~.,method = "lasso", data = training)
lassoModel$finalModel
plot.enet(lassoModel$finalModel, use.color = color)
plot.enet(lassoModel$finalModel, use.color = color)
?plot.enet
plot.enet(lassoModel$finalModel, use.color = T)
actives_data <- read.csv("activity.csv")
setwd("/Users/summerge/Documents/Learning R/RR")
library(dplyr);library(ggplot2);library(knitr)
actives_data <- read.csv("activity.csv")
head(actives_data)
?plot
setwd("/Users/summerge/Documents/Learning R/RR")
library(dplyr);library(ggplot2);library(knitr)
actives_data <- read.csv("activity.csv")
by_date_actives <- group_by(actives_data, date)
totalsteps_preday <- summarise(by_date_actives, steps = sum(steps, na.rm = T))
summary(totalsteps_preday$steps)
by_interval <- group_by(actives_data, interval)
meansteps_preinterval <- summarise(by_interval, steps = mean(steps, na.rm = T))
meansteps_preinterval
tail(meansteps_preinterval)
which.max(meansteps_preinterval$steps)
meansteps_preinterval(which.max(meansteps_preinterval$steps))
meansteps_preinterval[which.max(meansteps_preinterval$steps)]
meansteps_preinterval[which.max(meansteps_preinterval$steps),]
ls()
summary(actives_data$steps)
dim(actives_data)
summary(actives_data$date)
summary(actives_data$interval)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
head(airquality)
head(actives_data)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm <- with(melt(airquality, id=c("month", "day"), na.rm=TRUE), data = airquality)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
names(airquality) <- tolower(names(airquality))
aqm <- with(melt(airquality, id=c("month", "day"), na.rm=TRUE), data = airquality)
head(aqm)
acast(aqm, day ~ month ~variable)
